#!/bin/bash
#  vim: foldlevel=0:

sanitize_file_name() {
  if [[ -z $1 ]] ; then 
    for i in * ; do sed -E "s/ |\(|\!|&|\)|'|\[|\]/_/g" <<< $i; done
  fi
  dot_rename "s/ |\(|\!|&|\)|'|\[|\]/_/g" $1
}

ms() { # mpc search
  #mpc search
  # eg ms year:2000 path::Hindi
  # eg ms year:..1995 path::Hindi
  # mpc search filename "`echo $*| sed 's/ /_/g'`"
  # beet ls -f '$path' last_played:..2016-05 path::OS >! ~/.mpd/playlists/asd.m3u

  beet ls -f '$path' "$@" | sed 's#/home/murali/Dropbox/Songs/##'
}

mp() { #mpc play
  mpc clear > /dev/null
  # mpc search filename "`echo $*| sed 's/ /_/g'`" | mpc add
  beet ls -f '$path' "$@" | sed 's#/home/murali/Dropbox/Songs/##' | mpc add
  mpc play
}

msp() { #mpc search and play
  ms "$@"
  echo "Press enter to play selection"
  read
  mp "$@"
}

least_played() {
  # Print the access time along with the file name
  # eg : to play songs played before 10 days
  # least_played -atime +10
  cd /home/murali/Dropbox/Songs/
  find -type f "${@}" -iname "*.mp3" -printf "\n%A@ %p" | \
    sort -nr | awk '{print $2}' | sed 's#./##' | sed '/^$/d' | mpc add
}

# database update
mu() { #mpc update Database
  rm /var/tmp/musiclibrary.blb; beet import -A ~/Dropbox/Songs/ ;
  mpc update;
}

# time till
tt() {

  USAGE="
  Usage:
    tt tomorrow5am
    tt 2:37am

  Spaces require quotes:

    tt 'jan1 3:01am 2019'
    tt 'tomorrow 3am'
  "

  if [ $# -eq 0 ];
  then
    echo "$USAGE"
    return 1;
  fi

  reqInSec=$(date -d "$1" +%s)
  nowInSec=$(date +%s)
  format=" "

  if [[ $reqInSec -gt $nowInSec ]]; then
    endTime=$(date -d "$1" -Is)
    startTime=$(date -Is)
    format+="+ "
  else
    startTime=$(date -d "$1" -Is)
    endTime=$(date -Is)
    format+="- "
  fi
  
  diffSec=$(datediff "$startTime" "$endTime" -f "%S")
  echo $diffSec
  if [[ $diffSec -gt 31622400 ]]; then
    format+="%yy "
  fi
  if [[ $diffSec -gt 2678400 ]]; then
    format+="%mm "
  fi
  if [[ $diffSec -gt 86400 ]]; then
    format+="%dd "
  fi
  if [[ $diffSec -gt 3600 ]]; then
    format+="%Hh "
  fi
  if [[ $diffSec -gt 60 ]]; then
    format+="%Mmins"
  fi
  datediff "$startTime" "$endTime" -f "$format"
}

time_after() {
  # time after x hours
  # time_after +7hours30mins
  # time_after "1months 20days 23hours44minutes"
  date -d "$@"
}


# simple calculator
function c() {
  noSpaceExpr=`echo $* | sed -e "s/ //g"`
  awk "BEGIN { print $noSpaceExpr }"
}
# alias it for zsh
if [[ $SHELL =~ "zsh" ]]; then alias c='noglob c'; fi

timeGoogle() {
  sudo date -s "$(wget -S  "http://www.google.com/" 2>&1 | \
    grep -E '^[[:space:]]*[dD]ate:'                      | \
    sed 's/^[[:space:]]*[dD]ate:[[:space:]]*//'          | \
    head -1l                                             | \
    awk '{print $1, $3, $2,  $5 ,"GMT", $4 }'            | \
    sed 's/,//')"
}

custom_defined_functions() {
  #TODO
  if [[ $SHELL =~ "zsh" ]]; then
    # if zsh
    functions | grep -P "^[^_ \t][^ ]* *\(\)" | grep -vP "^(prompt_|is-)"
  else
    # if bash
    declare -F
  fi
}

gen_pass() {
  length=15
  gen_pwd=$(LC_ALL=C tr -dc '[:graph:]' < /dev/urandom | head -c $length)
  grep -P "(?=.*\d)(?=.*[a-zA-Z]).{15,}" <<< $gen_pwd
}

decimal_to_binary() {
  export D2B=({0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1})
  echo "${D2B[  $(($1+1))  ]}"
  # leading zeros removed
  echo $(( ${D2B[ $(($1+1)) ]} ))
}
binary_to_decimal() {
  echo $((2#$1))
}

# create a tmux for the first teminal spawned 
attach_to_tmux() {
  export TMUX_SOCKET_NAME=${1:-default}
  export TMUX_SESSION_NAME=${2:-Main}
  if [ $(tmux -L $TMUX_SOCKET_NAME list-sessions 2> /dev/null | wc -l) -eq 0 ] ; then
    # if no tmux session in the machine , create  one and attach
    tmux -L $TMUX_SOCKET_NAME new-session -s "$TMUX_SESSION_NAME" -d ;
    tmux -L $TMUX_SOCKET_NAME attach;
  else
    # if a session is already there but not attached, then attach
    if [ $(tmux -L $TMUX_SOCKET_NAME list-clients | wc -l) -eq 0 ]; then
      tmux -L $TMUX_SOCKET_NAME attach;
    fi
    # else do nothing if alredy attached
  fi
  alias ta='tmux -L $TMUX_SOCKET_NAME attach'
  alias tad='tmux -L $TMUX_SOCKET_NAME attach -d'
}

# https://github.com/junegunn/fzf/wiki/Examples-(completion)#examples
_fzf_complete_pass() {
  _fzf_complete '+m' "$@" < <(
    pwdir=${PASSWORD_STORE_DIR-~/.password-store/}
    stringsize="${#pwdir}"
    find "$pwdir" -name "*.gpg" -print |
        cut -c "$((stringsize + 1))"-  |
        sed -e 's/\(.*\)\.gpg/\1/'
  )
}

update_freedesktop_menu() {
  xdg_menu --format awesome --root-menu /etc/xdg/menus/arch-applications.menu >~/.config/awesome/archmenu.lua
}

dot_rename() {
  SUBSEXPR=$1
  shift
  for i in $@; do mv -i "$i" "$(echo "$i" | sed -E $SUBSEXPR)"; done
}

colortest() { #8/16bit colors also exist

#   Daniel Crisman's ANSI color chart script from
#   The Bash Prompt HOWTO: 6.1. Colours
#   http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html
#  
#   This function echoes a bunch of color codes to the 
#   terminal to demonstrate what's available.  Each 
#   line is the color code of one forground color,
#   out of 17 (default + 16 escapes), followed by a 
#   test use of that color on all nine background 
#   colors (default + 8 escapes).
 
  T='•••'   # The text for the color test
  
  echo -e "\n         def     40m     41m     42m     43m     44m     45m     46m     47m";
  
  for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
             '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
             '  36m' '1;36m' '  37m' '1;37m';
  
    do FG=${FGs// /}
    echo -en " $FGs \033[$FG  $T  "
    
    for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
      do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
    done
    echo;
  done
  echo

# Tmux Color Test 256 colors
  echo 'Following can be used as color${num} in tmux'

  echo 'System colors:'
  for i in {0..15}; do 
    printf "\x1b[38;5;${i}m %-3i\x1b[0m" $i ;
    if ! (( ($i + 1 ) % 8 )); then
      echo ;
    fi ;
  done
  echo 'Color cube, 6x6x6:'
  for i in {16..231}; do 
    printf "\x1b[38;5;${i}m %-3i\x1b[0m" $i ;
    if ! (( ($i + 3 ) % 6 )); then
      printf " ";
    fi ;
    if ! (( ($i -15) % 36 )); then
      echo ;
    fi
  done
  echo 'Grayscale ramp:'
  for i in {232..255}; do 
    printf "\x1b[38;5;${i}m %-3i\x1b[0m" $i ;
  done
  echo ;


  echo 'System colors:'
  for i in {0..15}; do 
    printf "\x1b[48;5;${i}m  \x1b[0m";
    if ! (( ($i + 1 ) % 8 )); then
      echo ;
    fi ;
  done
  echo 'Color cube, 6x6x6:'
  for green in {0..5}; do
    for red in {0..5}; do
      for blue in {0..5}; do
        color=$((16 + (red * 36) + (green * 6) + blue ))
        printf "\x1b[48;5;${color}m  \x1b[0m";
      done
      printf "\x1b[0m ";
    done
    echo ;
  done
  echo 'Grayscale ramp:'
  for i in {232..255}; do 
    printf "\x1b[48;5;${i}m  \x1b[0m";
  done
  echo ;

# True Color Test

  echo "\nTest TrueColors (If Terminal supports truecolors a continuous band will be seen below): "
  awk 'BEGIN{
      s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
      for (colnum = 0; colnum<77; colnum++) {
          r = 255-(colnum*255/76);
          g = (colnum*510/76);
          b = (colnum*255/76);
          if (g>255) g = 510-g;
          printf "\033[48;2;%d;%d;%dm", r,g,b;
          printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
          printf "%s\033[0m", substr(s,colnum+1,1);
      }
      printf "\n";
  }'

}

find_vim() {
  # find vim in tmux and send keys to open the file
  vim_window_panes=$(tmux list-panes -a -F "#{window_index}.#{pane_index} #{pane_current_command}" | grep vim | awk '{print $1}')
  if [[ -z $vim_window_panes ]]; then
    nvim $1
    return
  fi
  if [[ $(wc -l <<< "$vim_window_panes" ) -gt 1 ]]; then
    echo "Multiple vims open at: $vim_window_panes"
    return
  fi
  vim_window=$(awk -F'.' '{print $1}' <<< $vim_window_panes )
  vim_pane=$(awk -F'.' '{print $2}' <<< $vim_window_panes )
  local file_path="$1"
  if [ "${file_path##$HOME}" != "$file_path" ]; then
    full_path="$file_path"
  else
    full_path="$PWD/$file_path"
  fi
  command -v pbcopy > /dev/null && { echo -n "$full_path" | pbcopy ; }

  tmux select-window -t $vim_window && \
    tmux select-pane -t $vim_pane && \
    { [[ ! -z "$file_path" ]] && tmux send-keys ":e " C-f p Enter ; }
}
