#!/bin/bash
#  vim: foldlevel=0:

sanitize_file_name() {
  # Usage:
  #
  #     sanitize_file_name -n $file1 $file2 #  dry run
  #     sanitize_file_name $files $file2    # reaname files
  #
  if [[ "f$1" == "f-n" ]] ; then 
    shift
    for i in $@ ; do 
      sed -E "s/ |\(|\!|&|\)|'|\[|\]/_/g" <<< $i; 
    done
    return
  fi
  dot_rename "s/ |\(|\!|&|\)|'|\[|\]/_/g" $@
}

mp() {
  # music play
  # eg mp year:2000 path::Hindi
  # eg mp year:..1995 path::Hindi
  # mpc search filename "`echo $*| sed 's/ /_/g'`"
  # beet ls -f '$path' last_played:..2016-05 path::OS >! ~/.mpd/playlists/asd.m3u
  # beet ls -f '$path' 'last_played::^$' # never played
  if ! pgrep beet ; then
    { beet mpdstats  2>&1 & } 2>&1 > /var/tmp/beet_mpdstats
  fi
  mpc clear > /dev/null
  # Alternate method using mpc: (but less powerfull)
  # mpc search filename "`echo $*| sed 's/ /_/g'`" | mpc add
  beet ls -f '$path' "$@" | sed 's#.*Songs/##' | mpc add
  mpc play
}

# database update
mu() { #mpc update Database
  rm /var/tmp/musiclibrary.blb; beet import -A ~/Songs ;
  mpc update;
}

# simple calculator
function c() {
  noSpaceExpr=`echo $* | sed -e "s/ //g"`
  awk "BEGIN { print $noSpaceExpr }"
}
# alias it for zsh
if [[ $SHELL =~ "zsh" ]]; then alias c='noglob c'; fi

custom_defined_functions() {
  #TODO
  if [[ $SHELL =~ "zsh" ]]; then
    # if zsh
    functions | grep -P "^[^_ \t][^ ]* *\(\)" | grep -vP "^(prompt_|is-)"
  else
    # if bash
    declare -F
  fi
}

gen_pass() {
  length=15
  gen_pwd=$(LC_ALL=C tr -dc '[:graph:]' < /dev/urandom | head -c $length)
  grep -P "(?=.*\d)(?=.*[a-zA-Z]).{15,}" <<< $gen_pwd
}

# create a tmux for the first teminal spawned 
attach_to_tmux() {
  export TMUX_SOCKET_NAME=${1:-default}
  export TMUX_SESSION_NAME=${2:-Main}
  if [ $(tmux -L $TMUX_SOCKET_NAME list-sessions 2> /dev/null | wc -l) -eq 0 ] ; then
    # if no tmux session in the machine , create  one and attach
    tmux -L $TMUX_SOCKET_NAME new-session -s "$TMUX_SESSION_NAME" -d ;
    tmux -L $TMUX_SOCKET_NAME attach;
  else
    # if a session is already there but not attached, then attach
    if [ $(tmux -L $TMUX_SOCKET_NAME list-clients | wc -l) -eq 0 ]; then
      tmux -L $TMUX_SOCKET_NAME attach;
    fi
    # else do nothing if alredy attached
  fi
  alias ta='tmux -L $TMUX_SOCKET_NAME attach'
  alias tad='tmux -L $TMUX_SOCKET_NAME attach -d'
}

# https://github.com/junegunn/fzf/wiki/Examples-(completion)#examples
_fzf_complete_pass() {
  _fzf_complete '+m' "$@" < <(
    pwdir=${PASSWORD_STORE_DIR-~/.password-store/}
    stringsize="${#pwdir}"
    find "$pwdir" -name "*.gpg" -print |
        cut -c "$((stringsize + 1))"-  |
        sed -e 's/\(.*\)\.gpg/\1/'
  )
}

update_freedesktop_menu() {
  xdg_menu --format awesome --root-menu /etc/xdg/menus/arch-applications.menu >~/.config/awesome/archmenu.lua
}

dot_rename() {
  SUBSEXPR=$1
  shift
  for i in $@; do mv -i "$i" "$(echo "$i" | sed -E $SUBSEXPR)"; done
}

tohex(){
    dec=$(($1%256))   ### input must be a number in range 0-255.
    if [ "$dec" -lt "16" ]; then
        bas=$(( dec%16 ))
        mul=128
        [ "$bas" -eq "7" ] && mul=192
        [ "$bas" -eq "8" ] && bas=7
        [ "$bas" -gt "8" ] && mul=255
        a="$((  (bas&1)    *mul ))"
        b="$(( ((bas&2)>>1)*mul ))"
        c="$(( ((bas&4)>>2)*mul ))"
        printf 'dec= %3s basic= #%02x%02x%02x\n' "$dec" "$a" "$b" "$c"
    elif [ "$dec" -gt 15 ] && [ "$dec" -lt 232 ]; then
        b=$(( (dec-16)%6  )); b=$(( b==0?0: b*40 + 55 ))
        g=$(( (dec-16)/6%6)); g=$(( g==0?0: g*40 + 55 ))
        r=$(( (dec-16)/36 )); r=$(( r==0?0: r*40 + 55 ))
        printf 'dec= %3s color= #%02x%02x%02x\n' "$dec" "$r" "$g" "$b"
    else
        gray=$(( (dec-232)*10+8 ))
        printf 'dec= %3s  gray= #%02x%02x%02x\n' "$dec" "$gray" "$gray" "$gray"
    fi
}

get_256clors_hex() {
  for i in $(seq 0 255); do
      tohex ${i}
  done
}

colortest() { #8/16bit colors also exist

#   Daniel Crisman's ANSI color chart script from
#   The Bash Prompt HOWTO: 6.1. Colours
#   http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html
#  
#   This function echoes a bunch of color codes to the 
#   terminal to demonstrate what's available.  Each 
#   line is the color code of one forground color,
#   out of 17 (default + 16 escapes), followed by a 
#   test use of that color on all nine background 
#   colors (default + 8 escapes).
 
  T='•••'   # The text for the color test
  
  echo -e "\n         def     40m     41m     42m     43m     44m     45m     46m     47m";
  
  for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
             '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
             '  36m' '1;36m' '  37m' '1;37m';
  
    do FG=${FGs// /}
    echo -en " $FGs \033[$FG  $T  "
    
    for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
      do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
    done
    echo;
  done
  echo

# Tmux Color Test 256 colors
  echo 'Following can be used as color${num} in tmux'

  echo 'System colors:'
  for i in {0..15}; do 
    printf "\x1b[38;5;${i}m %-3i\x1b[0m" $i ;
    if ! (( ($i + 1 ) % 8 )); then
      echo ;
    fi ;
  done
  echo 'Color cube, 6x6x6:'
  for i in {16..231}; do 
    printf "\x1b[38;5;${i}m %-3i\x1b[0m" $i ;
    if ! (( ($i + 3 ) % 6 )); then
      printf " ";
    fi ;
    if ! (( ($i -15) % 36 )); then
      echo ;
    fi
  done
  echo 'Grayscale ramp:'
  for i in {232..255}; do 
    printf "\x1b[38;5;${i}m %-3i\x1b[0m" $i ;
  done
  echo ;


  echo 'System colors:'
  for i in {0..15}; do 
    printf "\x1b[48;5;${i}m  \x1b[0m";
    if ! (( ($i + 1 ) % 8 )); then
      echo ;
    fi ;
  done
  echo 'Color cube, 6x6x6:'
  for green in {0..5}; do
    for red in {0..5}; do
      for blue in {0..5}; do
        color=$((16 + (red * 36) + (green * 6) + blue ))
        printf "\x1b[48;5;${color}m  \x1b[0m";
      done
      printf "\x1b[0m ";
    done
    echo ;
  done
  echo 'Grayscale ramp:'
  for i in {232..255}; do 
    printf "\x1b[48;5;${i}m  \x1b[0m";
  done
  echo ;

# True Color Test

  echo "\nTest TrueColors (If Terminal supports truecolors a continuous band will be seen below): "
  awk 'BEGIN{
      s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
      for (colnum = 0; colnum<77; colnum++) {
          r = 255-(colnum*255/76);
          g = (colnum*510/76);
          b = (colnum*255/76);
          if (g>255) g = 510-g;
          printf "\033[48;2;%d;%d;%dm", r,g,b;
          printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
          printf "%s\033[0m", substr(s,colnum+1,1);
      }
      printf "\n";
  }'

}

find_vim() {
  # find vim in tmux and send keys to open the file
  vim_window_panes=$(tmux list-panes -a -F "#{window_index}.#{pane_index} #{pane_current_command}" | grep vim | awk '{print $1}')
  if [[ -z $vim_window_panes ]]; then
    nvim "$@"
    return
  fi
  if [[ $(wc -l <<< "$vim_window_panes" ) -gt 1 ]]; then
    echo "Multiple vims open at: $vim_window_panes"
    return
  fi
  vim_window=$(awk -F'.' '{print $1}' <<< "$vim_window_panes" )
  vim_pane=$(awk -F'.' '{print $2}' <<< "$vim_window_panes" )
  local file_path="$1"
  if [ "${file_path##$HOME}" != "$file_path" ]; then
    full_path="$file_path"
  else
    full_path="$PWD/$file_path"
  fi
  command -v pbcopy > /dev/null && { echo -n "$full_path" | pbcopy ; }

  tmux select-window -t "$vim_window" && \
    tmux select-pane -t "$vim_pane" && \
    { [[ -n "$file_path" ]] && tmux send-keys ":e " C-f p Enter ; }
}

fehhelper() {
  # pass -t to see thumbnails
  feh \
    -eDejaVuSans/28 \
    -C/usr/share/fonts/TTF \
    --thumb-height 200 \
    --thumb-width 200 \
    -r --limit-width 1900  --scale-down -d \
    --geometry 1900x1000 -Z \
    --info "exiftool %F  | egrep '(Image Size|Create Date|File Size)'" "$@"
}


fonttest() {
  x=(0 1 2 3 4 5 6 7 8 9 A B C D E F)
  for a in {0..15}; do for b in {0..15}; do for c in {0..15}; do
      [[ $a -eq 0 && $b -eq 0 && $c -lt 2 ]] && continue
      echo -en "\n${x[$a]}${x[$b]}${x[$c]}X: "
      for d in {0..15}; do
          echo -en "\u${x[$a]}${x[$b]}${x[$c]}${x[$d]}"
      done
  done; done; done
}

cash() {
  symbols='{
    "INR": "₹",
    "EUR": "£",
    "USD": "$"
  }'
  base="$(tr a-z A-Z <<< $1)"
  filename=${base}$(date +%F).json
  if [[ ! -f /var/tmp/$filename ]]; then
    curl "https://api.exchangeratesapi.io/latest?base=${base}" -o /var/tmp/$filename
  fi
  shift
  currencies=""
  while [ $# -ne 0 ] ; do
    case $1 in
      [0-9]*)
        amount=$1
        ;;
      *)
        currencies+=" $(tr a-z A-Z <<< $1)"
        ;;
    esac
    shift
  done
  val=$(LC_NUMERIC=hi_IN printf "%'.f\n" ${amount})
  echo $base: $(jq -r ".$base" <<< $symbols )$val
  for cur in $(tr ' ' '\n' <<< $currencies); do
    rate=$(jq ".rates.$cur" /var/tmp/$filename)
    val=$(LC_NUMERIC=en_US printf "%'.f\n" $(c ${amount}*${rate}))
    echo $cur: $(jq -r ".$cur" <<< $symbols )$val
  done
}
